{"mappings":"kgBAcAA,MAAK,sBACFC,MAAKC,GAAOA,EAAIC,SAChBF,eAmCWG,GACZ,MAAMC,EAAgBD,EAAKC,MAAMC,KAAIC,IAAC,CAAOC,GAAID,MAEjD,IAAIE,EAAK,OACJ,MAAOC,EAAIC,KAAQC,OAAOC,QAAQT,EAAKU,OAAK,IAC1C,MAAOC,EAAIC,KAAQJ,OAAOC,QAAQF,GACrCF,EAAMQ,KAAI,CACRC,OAAQC,SAAST,GACjBU,OAAQD,SAASJ,GACjBM,EAAGL,IAKT,MAAMM,EAAYC,EAAAC,cAAcC,OAAM,CAAE,IAAK,IAAIC,MAAK,CAAE,GAAK,IASvDC,EAAYJ,EAAAK,UAAsBnB,GACrCD,IAAGa,GAAKA,EAAEb,KACVqB,UAASR,GAAKC,GAAsBD,EAAEA,EATP,MAa5BS,EAAaP,EAAAQ,gBAAgB1B,GAChC2B,MAAK,OAASL,GACdK,MAAK,SAAWT,EAAAU,iBAChBD,MAAK,SAAWT,EAAAW,YAAYC,EAAAC,MAAQ,EAAGD,EAAAE,OAAS,IAChDL,MAAK,IAEJT,EAAAe,OAAOH,EAAAC,MAAQ,GAAGG,UAASlB,GACzBA,EAAEd,GAAK4B,EAAAC,MATE,IASgBf,EAAEd,GATlB,GASgC,EAAI,OAGhDyB,MAAK,IAEJT,EAAAiB,OAAOL,EAAAE,OAAS,GAAGE,UAASlB,GAC1BA,EAAEoB,GAAKN,EAAAE,OAfE,IAeiBhB,EAAEoB,GAfnB,GAeiC,EAAI,OAI9CC,EAAMnB,EAAAoB,OAAM,gBAAiBC,KAAI,UAAU,CAC/C,EACA,EACAT,EAAAC,MACAD,EAAAE,SA2BIQ,EAAOH,EACVI,OAAM,KACNF,KAAI,iBAAmB,IACvBG,UAAS,QACT3C,KAAKK,GACLuC,KAAI,QACJJ,KAAI,eAAiB,KACrBA,KAAI,UAAWvB,GA/BJ,CAAIA,IAChB,IAAI4B,EAAM,EACNC,EAAM,OACL,MAAMC,KAAKC,GACT/B,EAAE8B,IAAM,GAAKF,IAChBA,EAAM5B,EAAE8B,GACRD,EAASC,UAILD,qJAqBaG,CAAShC,EAAEA,KAE5BiC,EAAOZ,EACVI,OAAM,KACNC,UAAS,UACT3C,KAAKC,GACL2C,KAAI,UACJJ,KAAI,IAAM,GACVA,KAAI,OAAO,OAEdd,EAAWyB,GAAE,QAAO,KAClBV,EACGD,KAAI,MAAOvB,GAAMA,EAAEH,OAAgBX,IACnCqC,KAAI,MAAOvB,GAAMA,EAAEH,OAAgBuB,IACnCG,KAAI,MAAOvB,GAAMA,EAAED,OAAgBb,IACnCqC,KAAI,MAAOvB,GAAMA,EAAED,OAAgBqB,IAEtCa,EAAKV,KAAI,MAAOvB,GAAKA,EAAEd,IAAGqC,KAAI,MAAOvB,GAAKA,EAAEoB,OAG9CX,EAAWyB,GAAE,OAAM,KACjBC,SAASC,cAAa,qBAAuBC,YAAW,yBAI1DC,YAAU,KACR7B,EAAW8B,OACXJ,SAASC,cAAa,qBAAuBC,YAAW,wBAEvD,QAhIL,MAAMN,EAAO","sources":["page/force_graph.ts"],"sourcesContent":["import {\n  select,\n  scaleSymlog,\n  forceCenter,\n  forceSimulation,\n  forceLink,\n  forceManyBody,\n  SimulationNodeDatum,\n  SimulationLinkDatum,\n  forceX,\n  forceY,\n} from 'd3';\nimport { margin, width, height } from './settings';\n\nfetch('./force_graph.json')\n  .then(res => res.json())\n  .then(draw);\n\ntype Datum = {\n  Munich?: number;\n  Berlin?: number;\n  Stuttgart?: number;\n  Helsinki?: number;\n  Tampere?: number;\n};\n\ntype Data = {\n  nodes: number[];\n  edges: {\n    [p1: number]: {\n      [p2: number]: Datum;\n    };\n  };\n};\n\ntype Office = 'Munich' | 'Berlin' | 'Stuttgart' | 'Helsinki' | 'Tampere';\nconst offices: Office[] = [\n  'Munich',\n  'Berlin',\n  'Stuttgart',\n  'Helsinki',\n  'Tampere',\n];\n\ninterface Node extends SimulationNodeDatum {\n  id: number;\n}\ninterface Edge extends SimulationLinkDatum<Node> {\n  d: Datum;\n}\n\nfunction draw(data: Data) {\n  const nodes: Node[] = data.nodes.map(x => ({ id: x }));\n\n  let links: Edge[] = [];\n  for (const [p1, p2s] of Object.entries(data.edges)) {\n    for (const [p2, obj] of Object.entries(p2s)) {\n      links.push({\n        source: parseInt(p1),\n        target: parseInt(p2),\n        d: obj,\n      });\n    }\n  }\n\n  const linkScale = scaleSymlog().domain([150, 1]).range([0.5, 5]);\n\n  const getDistance = (d: Datum) => 3;\n  /*(d.Munich ?? 0) +\n    (d.Berlin ?? 0) +\n    (d.Stuttgart ?? 0) +\n    (d.Helsinki ?? 0) +\n    (d.Tampere ?? 0);*/\n\n  const linkForce = forceLink<Node, Edge>(links)\n    .id(d => d.id)\n    .distance(d => linkScale(getDistance(d.d)));\n\n  const border = 20;\n\n  const simulation = forceSimulation(nodes)\n    .force('link', linkForce)\n    .force('charge', forceManyBody())\n    .force('center', forceCenter(width / 2, height / 2))\n    .force(\n      'x',\n      forceX(width / 2).strength(d =>\n        d.x >= width - border || d.x <= border ? 1 : 0.01\n      )\n    )\n    .force(\n      'y',\n      forceY(height / 2).strength(d =>\n        d.y >= height - border || d.y <= border ? 1 : 0.01\n      )\n    );\n\n  const svg = select('#force_graph').attr('viewBox', [\n    0,\n    0,\n    width,\n    height,\n  ] as any);\n\n  const getColor = (d: Datum) => {\n    let max = 0;\n    let office = '';\n    for (const o of offices) {\n      if ((d[o] ?? 0) > max) {\n        max = d[o];\n        office = o;\n      }\n    }\n\n    switch (office) {\n      case 'Helsinki':\n        return 'steelblue';\n      case 'Tampere':\n        return 'green';\n      case 'Munich':\n        return 'red';\n      case 'Berlin':\n        return 'gray';\n      case 'Stuttgart':\n        return '#9400d3';\n    }\n  };\n\n  const link = svg\n    .append('g')\n    .attr('stroke-opacity', 0.4)\n    .selectAll('line')\n    .data(links)\n    .join('line')\n    .attr('stroke-width', 0.25)\n    .attr('stroke', d => getColor(d.d));\n\n  const node = svg\n    .append('g')\n    .selectAll('circle')\n    .data(nodes)\n    .join('circle')\n    .attr('r', 2)\n    .attr('fill', 'red');\n\n  simulation.on('tick', () => {\n    link\n      .attr('x1', d => (d.source as Node).x)\n      .attr('y1', d => (d.source as Node).y)\n      .attr('x2', d => (d.target as Node).x)\n      .attr('y2', d => (d.target as Node).y);\n\n    node.attr('cx', d => d.x).attr('cy', d => d.y);\n  });\n\n  simulation.on('end', () => {\n    document.querySelector('#force_graph_text')!.textContent =\n      'Simulation finished';\n  });\n\n  setTimeout(() => {\n    simulation.stop();\n    document.querySelector('#force_graph_text')!.textContent =\n      'Simulation finished';\n  }, 90000);\n}\n"],"names":["fetch","then","res","json","data","nodes","map","x","id","links","p1","p2s","Object","entries","edges","p2","obj","push","source","parseInt","target","d","linkScale","$3b7vp","scaleSymlog","domain","range","linkForce","forceLink","distance","simulation","forceSimulation","force","forceManyBody","forceCenter","$d9FT9","width","height","forceX","strength","forceY","y","svg","select","attr","link","append","selectAll","join","max","office","o","$8ce12cb192ba4b5b$var$offices","getColor","node","on","document","querySelector","textContent","setTimeout","stop"],"version":3,"file":"index.850cb908.js.map"}