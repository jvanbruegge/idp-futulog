{"mappings":"kgBAcAA,MAAK,sBACFC,MAAKC,GAAOA,EAAIC,SAChBF,MAAKG,GAAQC,EAAKD,EAAME,KAC3BN,MAAK,8BACFC,MAAKC,GAAOA,EAAIC,SAChBF,MAAKG,GAAQC,EAAKD,EAAI,2CAAiD,MAC1EJ,MAAK,8BACFC,MAAKC,GAAOA,EAAIC,SAChBF,MAAKG,GAAQC,EAAKD,EAAI,kCAAuC,KAoBhE,MAAME,EAAO,8DAeJD,EACPD,EACAG,EACAC,EAAc,GACdC,EAAW,UAEJ,IAAIC,SAAQC,IACbH,IACFI,SAASC,cAAa,eAAgBL,UAAgBM,YAAW,wEAInE,MAAMC,EAAgBX,EAAKW,MAAMC,KAAIC,IAAC,CAAOC,GAAID,MAEjD,IAAIE,EAAK,OACJ,MAAOC,EAAIC,KAAQC,OAAOC,QAAQnB,EAAKoB,OAAK,IAC1C,MAAOC,EAAIC,KAAQJ,OAAOC,QAAQF,GACrCF,EAAMQ,KAAI,CACRC,OAAQC,SAAST,GACjBU,OAAQD,SAASJ,GACjBM,EAAGL,IAKT,MAAMM,EAAYC,EAAAC,cAAcC,OAAM,CAAE,IAAK,IAAIC,MAAK,CAAE,GAAK,IASvDC,EAAYJ,EAAAK,UAAsBnB,GACrCD,IAAGa,GAAKA,EAAEb,KACVT,UAASsB,GAAKC,GAAsBD,EAAEA,EATPtB,MAa5B8B,EAAaN,EAAAO,gBAAgBzB,GAChC0B,MAAK,OAASJ,GACdI,MAAK,SAAWR,EAAAS,iBAChBD,MAAK,SAAWR,EAAAU,YAAYC,EAAAC,MAAQ,EAAGD,EAAAE,OAAS,IAChDL,MAAK,IAEJR,EAAAc,OAAOH,EAAAC,MAAQ,GAAGG,UAASjB,GACzBA,EAAEd,GAAK2B,EAAAC,MATE,IASgBd,EAAEd,GATlB,GASgC,EAAI,OAGhDwB,MAAK,IAEJR,EAAAgB,OAAOL,EAAAE,OAAS,GAAGE,UAASjB,GAC1BA,EAAEmB,GAAKN,EAAAE,OAfE,IAeiBf,EAAEmB,GAfnB,GAeiC,EAAI,OAI9CC,EAAMlB,EAAAmB,OAAM,eAAkB5C,GAAQ6C,KAAI,UAAU,CACxD,EACA,EACAT,EAAAC,MACAD,EAAAE,SA2BIQ,EAAOH,EACVI,OAAM,KACNF,KAAI,iBAAmB,IACvBG,UAAS,QACTpD,KAAKe,GACLsC,KAAI,QACJJ,KAAI,eAAiB,KACrBA,KAAI,UAAWtB,GA/BJ,CAAIA,IAChB,IAAI2B,EAAM,EACNC,EAAM,OACL,MAAMC,KAAKrD,GACTwB,EAAE6B,IAAM,GAAKF,IAChBA,EAAM3B,EAAE6B,GACRD,EAASC,UAILD,qJAqBaE,CAAS9B,EAAEA,KAE5B+B,EAAOX,EACVI,OAAM,KACNC,UAAS,UACTpD,KAAKW,GACL0C,KAAI,UACJJ,KAAI,IAAM,GACVA,KAAI,OAAO,OAEdd,EAAWwB,GAAE,QAAO,KAClBT,EACGD,KAAI,MAAOtB,GAAMA,EAAEH,OAAgBX,IACnCoC,KAAI,MAAOtB,GAAMA,EAAEH,OAAgBsB,IACnCG,KAAI,MAAOtB,GAAMA,EAAED,OAAgBb,IACnCoC,KAAI,MAAOtB,GAAMA,EAAED,OAAgBoB,IAEtCY,EAAKT,KAAI,MAAOtB,GAAKA,EAAEd,IAAGoC,KAAI,MAAOtB,GAAKA,EAAEmB,OAG9CX,EAAWwB,GAAE,OAAM,KACjBnD,SAASC,cAAa,eAAgBL,UAAgBM,YAAW,yBAInEkD,YAAU,KACRzB,EAAW0B,OACXrD,SAASC,cAAa,eAAgBL,UAAgBM,YAAW,sBAEjEH,MACC","sources":["page/force_graph.ts"],"sourcesContent":["import {\n  select,\n  scaleSymlog,\n  forceCenter,\n  forceSimulation,\n  forceLink,\n  forceManyBody,\n  SimulationNodeDatum,\n  SimulationLinkDatum,\n  forceX,\n  forceY,\n} from 'd3';\nimport { margin, width, height } from './settings';\n\nfetch('./force_graph.json')\n  .then(res => res.json())\n  .then(data => draw(data, offices));\nfetch('./force_graph_germany.json')\n  .then(res => res.json())\n  .then(data => draw(data, ['Munich', 'Berlin', 'Stuttgart'], '_germany', 10));\nfetch('./force_graph_finland.json')\n  .then(res => res.json())\n  .then(data => draw(data, ['Helsinki', 'Tampere'], '_finland', 6));\n\ntype Datum = {\n  Munich?: number;\n  Berlin?: number;\n  Stuttgart?: number;\n  Helsinki?: number;\n  Tampere?: number;\n};\n\ntype Data = {\n  nodes: number[];\n  edges: {\n    [p1: number]: {\n      [p2: number]: Datum;\n    };\n  };\n};\n\ntype Office = 'Munich' | 'Berlin' | 'Stuttgart' | 'Helsinki' | 'Tampere';\nconst offices: Office[] = [\n  'Munich',\n  'Berlin',\n  'Stuttgart',\n  'Helsinki',\n  'Tampere',\n];\n\ninterface Node extends SimulationNodeDatum {\n  id: number;\n}\ninterface Edge extends SimulationLinkDatum<Node> {\n  d: Datum;\n}\n\nfunction draw(\n  data: Data,\n  offices: Office[],\n  suffix: string = '',\n  distance = 3\n): Promise<void> {\n  return new Promise(resolve => {\n    if (suffix) {\n      document.querySelector(`#force_graph${suffix}_text`)!.textContent =\n        'Simulation running, please wait until the graph is properly layouted';\n    }\n\n    const nodes: Node[] = data.nodes.map(x => ({ id: x }));\n\n    let links: Edge[] = [];\n    for (const [p1, p2s] of Object.entries(data.edges)) {\n      for (const [p2, obj] of Object.entries(p2s)) {\n        links.push({\n          source: parseInt(p1),\n          target: parseInt(p2),\n          d: obj,\n        });\n      }\n    }\n\n    const linkScale = scaleSymlog().domain([150, 1]).range([0.5, 5]);\n\n    const getDistance = (d: Datum) => distance;\n    /*(d.Munich ?? 0) +\n    (d.Berlin ?? 0) +\n    (d.Stuttgart ?? 0) +\n    (d.Helsinki ?? 0) +\n    (d.Tampere ?? 0);*/\n\n    const linkForce = forceLink<Node, Edge>(links)\n      .id(d => d.id)\n      .distance(d => linkScale(getDistance(d.d)));\n\n    const border = 20;\n\n    const simulation = forceSimulation(nodes)\n      .force('link', linkForce)\n      .force('charge', forceManyBody())\n      .force('center', forceCenter(width / 2, height / 2))\n      .force(\n        'x',\n        forceX(width / 2).strength(d =>\n          d.x >= width - border || d.x <= border ? 1 : 0.01\n        )\n      )\n      .force(\n        'y',\n        forceY(height / 2).strength(d =>\n          d.y >= height - border || d.y <= border ? 1 : 0.01\n        )\n      );\n\n    const svg = select('#force_graph' + suffix).attr('viewBox', [\n      0,\n      0,\n      width,\n      height,\n    ] as any);\n\n    const getColor = (d: Datum) => {\n      let max = 0;\n      let office = '';\n      for (const o of offices) {\n        if ((d[o] ?? 0) > max) {\n          max = d[o];\n          office = o;\n        }\n      }\n\n      switch (office) {\n        case 'Helsinki':\n          return 'steelblue';\n        case 'Tampere':\n          return 'green';\n        case 'Munich':\n          return 'red';\n        case 'Berlin':\n          return 'gray';\n        case 'Stuttgart':\n          return '#9400d3';\n      }\n    };\n\n    const link = svg\n      .append('g')\n      .attr('stroke-opacity', 0.4)\n      .selectAll('line')\n      .data(links)\n      .join('line')\n      .attr('stroke-width', 0.25)\n      .attr('stroke', d => getColor(d.d));\n\n    const node = svg\n      .append('g')\n      .selectAll('circle')\n      .data(nodes)\n      .join('circle')\n      .attr('r', 2)\n      .attr('fill', 'red');\n\n    simulation.on('tick', () => {\n      link\n        .attr('x1', d => (d.source as Node).x)\n        .attr('y1', d => (d.source as Node).y)\n        .attr('x2', d => (d.target as Node).x)\n        .attr('y2', d => (d.target as Node).y);\n\n      node.attr('cx', d => d.x).attr('cy', d => d.y);\n    });\n\n    simulation.on('end', () => {\n      document.querySelector(`#force_graph${suffix}_text`)!.textContent =\n        'Simulation finished';\n    });\n\n    setTimeout(() => {\n      simulation.stop();\n      document.querySelector(`#force_graph${suffix}_text`)!.textContent =\n        'Simulation finished';\n      resolve();\n    }, 90000);\n  });\n}\n"],"names":["fetch","then","res","json","data","$8ce12cb192ba4b5b$var$draw","$8ce12cb192ba4b5b$var$offices","offices","suffix","distance","Promise","resolve","document","querySelector","textContent","nodes","map","x","id","links","p1","p2s","Object","entries","edges","p2","obj","push","source","parseInt","target","d","linkScale","$3b7vp","scaleSymlog","domain","range","linkForce","forceLink","simulation","forceSimulation","force","forceManyBody","forceCenter","$d9FT9","width","height","forceX","strength","forceY","y","svg","select","attr","link","append","selectAll","join","max","office","o","getColor","node","on","setTimeout","stop"],"version":3,"file":"index.df799f9c.js.map"}